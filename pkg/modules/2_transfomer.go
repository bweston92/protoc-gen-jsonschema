package modules

import (
	"github.com/invopop/jsonschema"
	pgs "github.com/lyft/protoc-gen-star/v2"
	"github.com/pubg/protoc-gen-jsonschema/pkg/pjsonschema"
	"github.com/pubg/protoc-gen-jsonschema/pkg/proto"
)

type Transformer interface {
	Transform(registry *pjsonschema.Registry, entrypoint pgs.File, pluginOptions *proto.PluginOptions) *jsonschema.Schema
}

var _ Transformer = (*Draft202012Transformer)(nil)

type Draft202012Transformer struct {
}

func NewDraft202012Transformer() *Draft202012Transformer {
	return &Draft202012Transformer{}
}

func (t *Draft202012Transformer) Transform(registry *pjsonschema.Registry, entrypoint pgs.File, pluginOptions *proto.PluginOptions) *jsonschema.Schema {
	entryPointMessage := t.getEntrypointMessage(entrypoint.Messages(), proto.GetFileOptions(entrypoint), pluginOptions)
	if entryPointMessage == nil {
		return nil
	}

	rootSchema := &jsonschema.Schema{}
	rootSchema.Version = jsonschema.Version
	rootSchema.Description = "Generated by protoc-gen-jsonschema, file: " + entrypoint.InputPath().String()
	rootSchema.Type = "object"
	rootSchema.Definitions = map[string]*jsonschema.Schema{}
	rootSchema.Ref = toDef(entryPointMessage)

	for _, key := range registry.GetKeys() {
		rootSchema.Definitions[key] = registry.GetSchema(key)
	}
	return rootSchema
}

func (t *Draft202012Transformer) getEntrypointMessage(messages []pgs.Message, fileOptions *proto.FileOptions, pluginOptions *proto.PluginOptions) pgs.Message {
	entryPointMessage := proto.GetEntrypointMessage(pluginOptions, fileOptions)
	if entryPointMessage == "" {
		// TODO: print debug message
		return nil
	}

	for _, message := range messages {
		if message.Name().String() == entryPointMessage {
			return message
		}
	}
	return nil
}
